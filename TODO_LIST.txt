================================================================================
TODO LIST - Complete Repository Scan
================================================================================

--------------------------------------------------------------------------------
File: ./src/main/java/com/example/advice/RestExceptionHandler.java
Class: RestExceptionHandler
--------------------------------------------------------------------------------

Line 26-28:
    // TODO
    // 文言のパラメータ返すことを検討
    // 同一グループ内の@AssertTrueに優先度を持たせる

Line 97-98:
        // TODO
        // errは現状FieldError型の前提


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/batch/CartCleanupJob.java
Class: CartCleanupJob
--------------------------------------------------------------------------------

Line 13-17:
    // TODO
    //  インデックス
    //  分割削除
    //  監視
    //  バッチのテストどうやるか？今は簡単だから起動して簡易確認のみ


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/batch/ReviewCleanupJob.java
Class: ReviewCleanupJob
--------------------------------------------------------------------------------

Line 13-17:
    // TODO
    //  否認時刻を追加するべきか？
    //  インデックス
    //  分割削除
    //  監視


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/config/SchedulingConfig.java
Class: SchedulingConfig
--------------------------------------------------------------------------------

Line 9-10:
// TODO
// 以下、本番環境も追加する


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/admin/AdminInventoryController.java
Class: AdminInventoryController
--------------------------------------------------------------------------------

Line 28-29:
    // TODO
    // 無効値のフォールバック


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/admin/AdminOrderController.java
Class: AdminOrderController
--------------------------------------------------------------------------------

Line 32-33:
    // TODO
    // コントローラの分割検討


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/admin/AdminProductController.java
Class: AdminProductController
--------------------------------------------------------------------------------

Line 27-28:
    // TODO
    // パスパラメータを小文字のスネークケースにすることを検討


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/AuthController.java
Class: AuthController
--------------------------------------------------------------------------------

Line 48-55:
    /* TODO:
    ユーザーが既にログインしている場合は、JWT の更新を行わない。
    しかし、複数デバイス間でログイン状態の共有を可能にするため、
    ユーザーが既にログインしているときでも新しい JWT を発行するかの判断が必要。
    
    画面を想定:
    「既にログイン中です。新しいログインを開始しますか？」　
    */

Line 66-68:
        // TODO
        // 将来的にJSONで返す方がよいかも
        // Postmanで毎リクエストで自動でJWTが付与されるようにする

Line 78-80:
        // TODO
        // JWTにパスワードリセットフラグを入れる（ユーザー操作制限のため）
        // 権限コントロールを徹底する


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/CartController.java
Class: CartController
--------------------------------------------------------------------------------

Line 36-38:
    // TODO:
    // 在庫を超える更新と、通常の更新のエラーメッセージを区別する方がよい？
    // カート全体の変更を配列で返すことも検討


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/CheckoutController.java
Class: CheckoutController
--------------------------------------------------------------------------------

Line 18-21:
    // TODO:
    // 注文完了後に成功画面を表示することを検討（その後注文履歴へ）
    // 決済連携後は、結果画面を返す
    // クーポン対応（将来）

Line 31-32:
        // TODO
        // リトライ処理追加


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/OrderHistoryController.java
Class: OrderHistoryController
--------------------------------------------------------------------------------

Line 20-22:
    // TODO:
    // 注文履歴の絞り込み（日付範囲、金額範囲、商品名等）をサポート
    // ページネーション


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/controller/ProductController.java
Class: ProductController
--------------------------------------------------------------------------------

Line 23-26:
    // TODO
    // 商品イメージの取得エンドポイント追加
    // 大文字/小文字区別せずソート
    // その他のソートの改善


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/dto/admin/AdminDashboardDto.java
Class: AdminDashboardDto
--------------------------------------------------------------------------------

Line 9-10:
    // TODO
    // 収益を金額(Decimal)にする


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/dto/CartItemDto.java
Class: CartItemDto
--------------------------------------------------------------------------------

Line 13-15:
    // TODO:
    // SKU表示するほうがよい？
    // 単価はexclかinclか？inclだとカート商品追加時にFKなくてもよいがシステムに合わせてexclとした


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/dto/CheckoutItemDto.java
Class: CheckoutItemDto
--------------------------------------------------------------------------------

Line 10-11:
    // TODO:
    // SKU表示するほうがよい？


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/EcommerceRestApplication.java
Class: EcommerceRestApplication
--------------------------------------------------------------------------------

Line 15-16:
// TODO
// AWSデプロイする場合、MyBatisのマッパー実装をBeanとして登録する必要があるケースがあるかも


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/entity/Order.java
Class: Order
--------------------------------------------------------------------------------

Line 18-19:
    // TODO:
    // 税額、税抜き合計保留→会計処理や売上分析などで必要になったら検討


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/entity/OrderItem.java
Class: OrderItem
--------------------------------------------------------------------------------

Line 13-14:
    // TODO:
    // 値引きなど別に保存？


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/entity/Product.java
Class: Product
--------------------------------------------------------------------------------

Line 15-17:
    // TODO:
    // 在庫管理の改善(ソフトデリート、作成者・更新者、カテゴリ、イメージなど)
    // JAN/UPC、原価など


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/enums/OrderSortField.java
Class: OrderSortField
--------------------------------------------------------------------------------

Line 5-6:
    // TODO:
    // キャメルケースの値を返すための仕組みを追加


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/feature/order/OrderTransitionGuard.java
Class: OrderTransitionGuard
--------------------------------------------------------------------------------

Line 18-23:
    // TODO:
    // 発送に関する仕様を整理する必要がある
    // ・一部発送/一部キャンセルの場合（本システムでは全発送・全キャンセルを前提）
    // ・決済タイミング（本システムでは注文時点で決済が発生することを前提）
    // ・配送業者のシステムへの連携（本システムでは手動操作を前提）
    // ・注文変更受付期限（本システムでは発送前まで変更可を前提）


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/feature/review/ReviewTransitionGuard.java
Class: ReviewTransitionGuard
--------------------------------------------------------------------------------

Line 10-14:
    // TODO:
    // 管理者のレビュー作成を防ぐ？
    // PENDING → REJECTEDをサポートする（編集期限切れ）
    // ユーザーへのメール通知
    // AI/MLによる自動承認/否認


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/mapper/admin/AdminDashboardMapper.java
Class: AdminDashboardMapper
--------------------------------------------------------------------------------

Line 13-17:
    // TODO:
    // last_30_daysのためのクエリを書く
    // 前期比を追加
    // 国別売上（国のマスタなし、AddressArea？）
    // 売れ筋商品ランキングを追加


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/mapper/admin/AdminInventoryMapper.java
Class: AdminInventoryMapper
--------------------------------------------------------------------------------

Line 9-10:
    // TODO:
    // 棚卸し調整の履歴保存（調整理由、調整者、調整日時）


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/mapper/admin/AdminOrderMapper.java
Class: AdminOrderMapper
--------------------------------------------------------------------------------

Line 19-20:
    // TODO:
    // 管理画面で注文作成できるようにする


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/mapper/CartMapper.java
Class: CartMapper
--------------------------------------------------------------------------------

Line 29-30:
    // TODO:
    // selectCartItemsの戻り値のSaleStatusは現在の値なのでDISCONTINUEDの場合、削除するか残すか判断が必要


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/mapper/OrderMapper.java
Class: OrderMapper
--------------------------------------------------------------------------------

Line 18-19:
    // TODO:
    // OrderItem subtotalInclをDB自動計算することを検討。Javaとの自動計算の整合性の複雑さ回避のため一旦保留


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/mapper/ProductMapper.java
Class: ProductMapper
--------------------------------------------------------------------------------

Line 25-26:
    // TODO:
    // 複数商品の在庫引き当てトランザクション管理の改善（１つ失敗すると全ロールバック？一部は成功?）


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/mapper/UserMapper.java
Class: UserMapper
--------------------------------------------------------------------------------

Line 17-18:
    // TODO:
    // 新規登録前のnonce用のテーブル作成


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/admin/OrderSearchRequest.java
Class: OrderSearchRequest
--------------------------------------------------------------------------------

Line 17-19:
    // TODO:
    // 注文者電話番号、配送先、注文日時範囲等の検索条件を追加
    // 複数ステータスでの絞り込み


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/admin/ProductSearchRequest.java
Class: ProductSearchRequest
--------------------------------------------------------------------------------

Line 12-14:
    // TODO:
    // カテゴリ、価格範囲、在庫範囲、作成日、更新日など
    // 複数ステータスでの絞り込み


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/admin/ProductUpsertRequest.java
Class: ProductUpsertRequest
--------------------------------------------------------------------------------

Line 16-17:
    // TODO:
    // 画像保存の検証（マルチパート・フォームデータまたは@RequestBodyか）


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/InquiryRequest.java
Class: InquiryRequest
--------------------------------------------------------------------------------

Line 11-12:
    // TODO:
    // 詳細なバリデーション追加(メールフォーマット、電話番号フォーマット等)


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/LoginRequest.java
Class: LoginRequest
--------------------------------------------------------------------------------

Line 9-10:
    // TODO
    // Emailの詳細な検証


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/PasswordResetMailRequest.java
Class: PasswordResetMailRequest
--------------------------------------------------------------------------------

Line 7-8:
    // TODO
    // Emailのバリデーション


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/PreSignupRequest.java
Class: PreSignupRequest
--------------------------------------------------------------------------------

Line 9-10:
    // TODO
    // パスワードポリシー（大文字小文字、数字、記号、長さ）


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/request/ProfileUpdateRequest.java
Class: ProfileUpdateRequest
--------------------------------------------------------------------------------

Line 10-11:
    // TODO
    // 日本の郵便番号と電話番号のバリデーション追加


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/security/CustomUserDetails.java
Class: CustomUserDetails
--------------------------------------------------------------------------------

Line 38-39:
    // TODO
    // 実装する必要があるかも（ただし実装するとisEnabledとか追加の管理項目が必要）


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/admin/AdminDashboardService.java
Class: AdminDashboardService
--------------------------------------------------------------------------------

Line 26-31:
    // TODO:
    // より複雑な集計機能を実装する（前期比、グラフのドリルダウン、地域別分析など）
    // キャッシュ戦略の実装
    // スケジュールジョブで事前集計
    // データベースのマテリアライズドビュー活用
    // 非同期処理とSSE/WebSocketでのリアルタイム更新


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/admin/AdminInventoryService.java
Class: AdminInventoryService
--------------------------------------------------------------------------------

Line 16-20:
    // TODO:
    // 在庫調整の履歴を記録
    // 複数商品の一括調整
    // 在庫アラート機能
    // 入荷予定管理


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/admin/AdminOrderService.java
Class: AdminOrderService
--------------------------------------------------------------------------------

Line 40-43:
    // TODO:
    // 注文編集の履歴保存
    // 配送業者への連携
    // 返金処理


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/admin/AdminProductService.java
Class: AdminProductService
--------------------------------------------------------------------------------

Line 44-48:
    // TODO:
    // 商品カテゴリ機能
    // 商品バリアント（サイズ、色など）
    // 関連商品機能
    // 商品レビュー統計の表示


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/admin/AdminReviewService.java
Class: AdminReviewService
--------------------------------------------------------------------------------

Line 29-33:
    // TODO:
    // NGワードチェック
    // スパム検出
    // レビューの一括承認/否認
    // レビュアーへの通知メール


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/AuthService.java
Class: AuthService
--------------------------------------------------------------------------------

Line 42-47:
    // TODO:
    // 2要素認証(2FA)の実装
    // ソーシャルログイン(OAuth2)
    // パスワードポリシーの強化
    // アカウントロック機能
    // ログイン履歴の記録

Line 94-95:
        // TODO
        // 認証後のカート結合

Line 124-125:
        // TODO
        // メールを送信して、そのメールからリンククリックでパスワードリセット画面へ

Line 170-171:
        // TODO
        // 住所フィールドをエンティティ設計に合わせて調整

Line 185-186:
        // TODO
        // メール認証のフロー実装


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/CartService.java
Class: CartService
--------------------------------------------------------------------------------

Line 39-45:
    // TODO:
    // カート保存/復元機能
    // カート共有機能
    // 後で買うリスト機能
    // カート内アイテムの価格変動通知
    // カート内アイテムの在庫切れ通知
    // カートの最大容量制限

Line 58-59:
        // TODO
        // カート結合のハンドリング

Line 82-83:
        // TODO
        // カート内アイテムの販売ステータスや価格変更のチェック


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/CheckoutService.java
Class: CheckoutService
--------------------------------------------------------------------------------

Line 40-46:
    // TODO:
    // 決済ゲートウェイとの連携
    // 配送オプションの選択
    // ギフトラッピング
    // クーポン/割引コード
    // ポイント利用
    // ゲスト購入のサポート

Line 67-68:
        // TODO
        // ゲストユーザーのチェックアウト

Line 108-109:
        // TODO
        // 販売中でない商品/在庫不足商品のハンドリング改善

Line 167-168:
        // TODO
        // 決済処理、税金計算、送料計算


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/FavoriteService.java
Class: FavoriteService
--------------------------------------------------------------------------------

Line 18-22:
    // TODO:
    // お気に入りリストの共有機能
    // お気に入り商品の価格変動通知
    // お気に入り商品の再入荷通知
    // カテゴリ別のお気に入り管理


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/InquiryService.java
Class: InquiryService
--------------------------------------------------------------------------------

Line 15-19:
    // TODO:
    // 問い合わせ履歴の保存
    // 問い合わせチケットシステム
    // 自動返信メール
    // カテゴリ別の問い合わせルーティング

Line 24-25:
        // TODO
        // データベースに保存、メール送信など


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/OrderCommandService.java
Class: OrderCommandService
--------------------------------------------------------------------------------

Line 28-32:
    // TODO:
    // 注文ステータス変更の通知
    // 部分キャンセル/部分返金
    // 注文の分割配送
    // 注文の統合


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/OrderHistoryService.java
Class: OrderHistoryService
--------------------------------------------------------------------------------

Line 21-25:
    // TODO:
    // 注文の絞り込み機能（日付、金額、ステータス）
    // 注文の並び替え機能
    // 注文明細のPDF出力
    // 再注文機能


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/ProductService.java
Class: ProductService
--------------------------------------------------------------------------------

Line 23-28:
    // TODO:
    // 商品の推奨機能（閲覧履歴、購入履歴ベース）
    // 商品比較機能
    // 最近見た商品の表示
    // 在庫アラート登録
    // 商品Q&A機能


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/ReviewCommandService.java
Class: ReviewCommandService
--------------------------------------------------------------------------------

Line 23-27:
    // TODO:
    // レビューの画像/動画アップロード
    // レビューへの「役に立った」機能
    // レビューへの返信機能
    // レビューの不正検出

Line 46-47:
        // TODO
        // メールに通知(?)


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/service/ReviewService.java
Class: ReviewService
--------------------------------------------------------------------------------

Line 17-21:
    // TODO:
    // レビューの並び替え（新しい順、評価順、役立ち順）
    // レビューのフィルタリング（星の数、認証済み購入者）
    // レビューの要約/ハイライト
    // レビューの感情分析


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/support/MailGateway.java
Class: MailGateway
--------------------------------------------------------------------------------

Line 29-33:
    // TODO:
    // HTMLメールテンプレート
    // 添付ファイル対応
    // 送信失敗時のリトライ
    // 送信履歴の記録

Line 45-46:
        // TODO
        // Mustacheなどのテンプレートエンジンを使って本格的なメール作成

Line 62-63:
        // TODO
        // Mustacheなどのテンプレートエンジンを使って本格的なメール作成


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/util/CookieUtil.java
Class: CookieUtil
--------------------------------------------------------------------------------

Line 8-10:
    // TODO:
    // SameSite属性の設定
    // CSRF対策の実装


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/util/JwtUtil.java
Class: JwtUtil
--------------------------------------------------------------------------------

Line 24-28:
    // TODO:
    // JWT更新トークンの実装
    // JWTブラックリストの管理
    // 複数の署名アルゴリズムのサポート
    // JWTのクレーム拡張


--------------------------------------------------------------------------------
File: ./src/main/java/com/example/util/PaginationUtil.java
Class: PaginationUtil
--------------------------------------------------------------------------------

Line 5-8:
    // TODO:
    // カーソルベースのページネーション
    // 無限スクロールのサポート
    // ページネーション情報のレスポンスヘッダー対応


--------------------------------------------------------------------------------
File: ./src/main/resources/application-dev.yml
--------------------------------------------------------------------------------

Line 33-35:
# TODO
# AWS Secrets Manager、環境変数、暗号化ファイルなどを検討
# 商用環境では接続プールサイズの調整が必要


--------------------------------------------------------------------------------
File: ./src/main/resources/db/migration/V1__init.sql
--------------------------------------------------------------------------------

Line 1-4:
-- TODO:
-- インデックス最適化
-- パーティショニングの検討（大規模データ対応）
-- 監査ログテーブルの追加


--------------------------------------------------------------------------------
File: ./src/test/java/com/example/controller/AuthControllerTest.java
Class: AuthControllerTest
--------------------------------------------------------------------------------

Line 248-249:
                // TODO
                // Cookie

Line 265-266:
                // TODO
                // Cookieチェック

Line 325-326:
                // TODO
                // Cookieチェック

Line 343-344:
                // TODO
                // Cookieチェック


--------------------------------------------------------------------------------
File: ./src/test/java/com/example/EcommerceRestApplicationTests.java
Class: EcommerceRestApplicationTests
--------------------------------------------------------------------------------

Line 8-10:
    // TODO:
    // 統合テストの充実
    // E2Eテストの実装


--------------------------------------------------------------------------------
File: ./src/test/java/com/example/service/admin/AdminProductServiceTest.java
Class: AdminProductServiceTest
--------------------------------------------------------------------------------

Line 206-207:
            // TODO
            // 一時画像削除の確認


--------------------------------------------------------------------------------
File: ./src/test/java/com/example/service/AuthServiceTest.java
Class: AuthServiceTest
--------------------------------------------------------------------------------

Line 106-107:
        // TODO
        // JWTに含まれる権限情報の検証


--------------------------------------------------------------------------------
File: ./src/test/java/com/example/service/FavoriteServiceTest.java
Class: FavoriteServiceTest
--------------------------------------------------------------------------------

Line 11-12:
// TODO
// FavoriteServiceのテスト実装


--------------------------------------------------------------------------------
File: ./src/test/java/com/example/service/OrderCommandServiceTest.java
Class: OrderCommandServiceTest
--------------------------------------------------------------------------------

Line 14-15:
// TODO
// OrderCommandServiceのテスト実装


--------------------------------------------------------------------------------
File: ./src/test/java/com/example/testUtil/TestDataFactory.java
Class: TestDataFactory
--------------------------------------------------------------------------------

Line 23-25:
    /*    TODO:
    ・各mapperに汎用CRUD作成する(MybatisGeneratorのようなメソッド)
    */


--------------------------------------------------------------------------------
File: ./src/test/resources/application-test.yml
--------------------------------------------------------------------------------

Line 23-25:
# TODO
# モックサーバーやTestcontainersの使用を検討
# テスト用のシークレット管理


--------------------------------------------------------------------------------
File: ./src/test/resources/db/migration_test/V1__init.sql
--------------------------------------------------------------------------------

Line 1-3:
-- TODO:
-- テストデータのシード処理
-- テスト専用のインデックス設定


================================================================================
END OF TODO LIST
Total files with TODOs: 68
================================================================================