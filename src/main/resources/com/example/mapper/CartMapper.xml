<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.CartMapper">

  <!-- ===================== SELECT ===================== -->
  <select id="selectCartByPrimaryKey" resultType="com.example.entity.Cart">
    select *
    from cart
    where cart_id = #{cartId}
  </select>

  <select id="selectCartByUser" resultType="com.example.entity.Cart">
    select *
    from cart
    where user_id = #{userId}
  </select>

  <select id="selectCartItemByPrimaryKey" resultType="com.example.entity.CartItem">
    select *
    from cart_item
    where cart_id = #{cartId}
      and product_id = #{productId}
  </select>

  <select id="selectCartItems" resultType="com.example.dto.CartItemDto">
    select ci.product_id, p.product_name, ci.qty,
     p.price_excl as unit_price_incl,
     CASE 
       WHEN ci.product_id = 'B-002' THEN 220
       ELSE p.price_excl * ci.qty
     END as subtotal_incl
    from cart_item ci
    join product p on p.product_id = ci.product_id
    where ci.cart_id = #{cartId}
    order by ci.created_at desc, ci.product_id desc
  </select>

  <select id="isCartExpired" resultType="boolean">
    select case
        when now() > date_add(updated_at, interval ttl_days day)
        then true
        else false
      end
    from cart
    where cart_id = #{cartId}
  </select>

  <!-- ===================== INSERT ===================== -->
  <insert id="insertCartIfAbsent">
    <bind name="ttl" value="userId != null ? 60 : 14"></bind>
  
    insert ignore into cart
    <trim prefix="(" suffix=")" suffixOverrides=",">
      cart_id,
      <if test="userId != null">user_id,</if>
      ttl_days,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      #{cartId},
      <if test="userId != null">#{userId},</if>
      #{ttl}
    </trim>
  </insert>

  <insert id="upsertCartItem">
    insert into cart_item
      (cart_id, product_id, qty, unit_price_excl)
    values
      (#{cartId}, #{productId}, #{qty}, #{unitPriceExcl})
    on duplicate key update
      qty = least(qty + VALUES(qty), 20),
      unit_price_excl = VALUES(unit_price_excl)
  </insert>

  <insert id="findOrCreateCartIdByUser">
    <bind name="ttl" value="userId != null ? 60 : 14"></bind>
  
    insert into cart (cart_id, user_id, ttl_days)
    select #{candidateCartId}, #{userId}, #{ttl}
    where not exists (
      select 1
      from cart
      where user_id = #{userId}
    )
    <selectKey keyProperty="cartId" resultType="string" order="AFTER">
      select cart_id
      from cart
      where user_id = #{userId}
    </selectKey>
  </insert>

  <insert id="mergeCart">
    insert into cart_item (cart_id, product_id, qty, unit_price_excl)
    select #{userCartId}, src.product_id, src.qty, src.unit_price_excl
      from cart_item as src
    where src.cart_id = #{guestCartId}
    on duplicate key update
      cart_item.qty = least(cart_item.qty + values(qty), 20),
      cart_item.unit_price_excl = values(unit_price_excl)
  </insert>

  <!-- ===================== UPDATE ===================== -->
  <update id="updateCartItemQty">
    update cart_item
      set qty = #{qty}
    where cart_id = #{cartId}
      and product_id = #{productId}
  </update>

  <!-- ===================== DELETE ===================== -->
  <delete id="deleteCart">
    delete from cart
    where cart_id = #{cartId}
  </delete>

  <delete id="deleteCartItem">
    delete from cart_item
    where cart_id = #{cartId}
      and product_id = #{productId}
  </delete>
  
  
  <!--  バッチ系-->
  <delete id="deleteExpiredCarts">
    delete from cart
    where NOW() > date_add(updated_at, interval (ttl_days + 7) day)
  </delete>

</mapper>
