<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.admin.AdminProductMapper">

  <select id="countProducts" resultType="int">
    select count(*)
    from vw_product_core v
    <where>
      <if test="keywords.size() &gt; 0">
        <foreach collection="keywords" item="kw" open="(" separator="OR" close=")">
          v.sku LIKE CONCAT('%', #{kw}, '%')
          OR v.product_name LIKE CONCAT('%', #{kw}, '%')
        </foreach>
      </if>
      <if test="minPrice != null">
        AND v.price_excl &gt;= #{minPrice}
      </if>
      <if test="maxPrice != null">
        AND v.price_excl &lt;= #{maxPrice}
      </if>
      <if test="minAvailable != null">
        AND v.available &gt;= #{minAvailable}
      </if>
      <if test="maxAvailable != null">
        AND v.available &lt;= #{maxAvailable}
      </if>
      <if test="createdFrom != null">
        AND v.created_at &gt;= #{createdFrom} 
      </if>
      <if test="createdTo != null">
        AND v.created_at &lt;= #{createdTo} 
      </if>
      <if test="updatedFrom != null">
        AND v.updated_at &gt;= #{updatedFrom} 
      </if>
      <if test="updatedTo != null">
        AND v.updated_at &lt;= #{updatedTo} 
      </if>
      <if test="status != null">
        AND v.status = #{status}
      </if>
    </where>
  </select>
  
  <select id="searchProducts" resultType="com.example.dto.admin.AdminProductDto">
    select 
      v.product_id,
      v.sku,
      v.product_name,
      v.price_excl,
      v.available,
      v.status,
      v.updated_at
    from vw_product_core v
    <where>
      <if test="req.keywords != null and req.keywords.size() &gt; 0">
        <foreach collection="req.keywords" item="kw" open="(" separator="OR" close=")">
          v.sku LIKE CONCAT('%', #{kw}, '%')
          OR v.product_name LIKE CONCAT('%', #{kw}, '%')
        </foreach>
      </if>
      <if test="req.minPrice != null">
        AND v.price_excl &gt;= #{req.minPrice}
      </if>
      <if test="req.maxPrice != null">
        AND v.price_excl &lt;= #{req.maxPrice}
      </if>
      <if test="req.minAvailable != null">
        AND v.available &gt;= #{req.minAvailable}
      </if>
      <if test="req.maxAvailable != null">
        AND v.available &lt;= #{req.maxAvailable}
      </if>
      <if test="req.createdFrom != null">
        AND v.created_at &gt;= #{req.createdFrom}
      </if>
      <if test="req.createdTo != null">
        AND v.created_at &lt;= #{req.createdTo}
      </if>
      <if test="req.updatedFrom != null">
        AND v.updated_at &gt;= #{req.updatedFrom}
      </if>
      <if test="req.updatedTo != null">
        AND v.updated_at &lt;= #{req.updatedTo}
      </if>
      <if test="req.status != null">
        AND v.status = #{req.status}
      </if>
    </where>
    order by
      ${req.sortField.field} ${req.sortDirection},
      v.product_id ASC
    limit #{limit}
    offset #{offset}
  </select>
  
  <insert id="insert">
    INSERT INTO product
      (product_id, product_name, price_excl, product_description,ã€€status)
    VALUES
      (#{productId},
       #{productName},
       #{priceExcl},
       #{productDescription},
       #{status})
  </insert>
  
  <update id="update">
    update product
    set
      product_name        = #{productName},
      price_excl          = #{priceExcl},
      product_description = #{productDescription},
      status              = #{status}
    WHERE product_id = #{productId}
  </update>

</mapper>
