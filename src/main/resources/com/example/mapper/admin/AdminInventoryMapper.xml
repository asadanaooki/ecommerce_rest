<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.admin.AdminInventoryMapper">

  <select id="search" resultType="com.example.dto.admin.AdminInventoryDto">
  SELECT product_id,
         sku,
         product_name,
         price_excl,
         available,
         updated_at
   FROM vw_product_core
   <where>
     <if test="req.minAvailable != null">
      and available &gt;= #{req.minAvailable}
    </if>
    <if test="req.maxAvailable != null">
      and available &lt;= #{req.maxAvailable}
    </if>
    <if test="req.stockStatus != null">
      <choose>
        <when test="req.stockStatus.name().equals('OUT_OF_STOCK')">
          and available = 0
        </when>
        <when test="req.stockStatus.name().equals('LOW_STOCK')">
          and available &gt; 0
          and available &lt;= #{threshold}
        </when>
        <when test="req.stockStatus.name().equals('IN_STOCK')">
          and available &gt; #{threshold} 
        </when>
      </choose>
    </if>
   </where>
   order by
    <choose>
      <when test="req.sortField.field.equals('stock_status')">
        field(
          case
            when available = 0 then 'OUT_OF_STOCK'
            when available &lt;= #{threshold} then 'LOW_STOCK'
            else 'IN_STOCK'
          end,
          'OUT_OF_STOCK','LOW_STOCK','IN_STOCK'
        ) 
      </when>
      <otherwise>
        ${req.sortField.field}
      </otherwise>
    </choose>
    ${req.sortDirection},
    sku asc
    limit #{limit} offset #{offset}
</select>

  <select id="count" resultType="int">
    select count(*)
    from vw_product_core
    <where>
      <if test="req.minAvailable != null">
        and available &gt;= #{req.minAvailable}
      </if>
      <if test="req.maxAvailable != null">
        and available &lt;= #{req.maxAvailable}
      </if>
      <if test="req.stockStatus != null">
        <choose>
          <when test="req.stockStatus.name().equals('OUT_OF_STOCK')">
            and available = 0
          </when>
          <when test="req.stockStatus.name().equals('LOW_STOCK')">
            and available &gt; 0
            and available &lt;= #{threshold}
          </when>
          <when test="req.stockStatus.name().equals('IN_STOCK')">
            and available &gt; #{threshold} 
          </when>
        </choose>
      </if>
    </where>
  </select>

  
  <select id="find" resultType="com.example.dto.admin.AdminInventoryDetailDto">
    SELECT product_id,
           sku,
           product_name,
           price_excl,
           stock,
           reserved,
           available,
           updated_at,
           version
    FROM vw_product_core
    WHERE product_id = #{productId}
  </select>

</mapper>
